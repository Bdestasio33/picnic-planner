/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Picnic Planner Weather API
 * Weather API for picnic planning using Open-Meteo data
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetApiWeatherCombinedParams,
  GetApiWeatherForecastParams,
  GetApiWeatherHistoricalParams,
  HistoricalWeatherResponseDto,
  ProblemDetails,
  WeatherForecastResponseDto,
} from "../../types";

import { customInstance } from "../../services/api-client";

export const getApiWeatherForecast = (
  params: GetApiWeatherForecastParams,
  signal?: AbortSignal,
) => {
  return customInstance<WeatherForecastResponseDto>({
    url: `/api/Weather/forecast`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiWeatherForecastQueryKey = (
  params: GetApiWeatherForecastParams,
) => {
  return [`/api/Weather/forecast`, ...(params ? [params] : [])] as const;
};

export const getGetApiWeatherForecastQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiWeatherForecast>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherForecastParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherForecast>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiWeatherForecastQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiWeatherForecast>>
  > = ({ signal }) => getApiWeatherForecast(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiWeatherForecast>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiWeatherForecastQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiWeatherForecast>>
>;
export type GetApiWeatherForecastQueryError = ProblemDetails;

export function useGetApiWeatherForecast<
  TData = Awaited<ReturnType<typeof getApiWeatherForecast>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherForecastParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherForecast>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiWeatherForecast>>,
          TError,
          Awaited<ReturnType<typeof getApiWeatherForecast>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiWeatherForecast<
  TData = Awaited<ReturnType<typeof getApiWeatherForecast>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherForecastParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherForecast>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiWeatherForecast>>,
          TError,
          Awaited<ReturnType<typeof getApiWeatherForecast>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiWeatherForecast<
  TData = Awaited<ReturnType<typeof getApiWeatherForecast>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherForecastParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherForecast>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiWeatherForecast<
  TData = Awaited<ReturnType<typeof getApiWeatherForecast>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherForecastParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherForecast>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiWeatherForecastQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiWeatherHistorical = (
  params: GetApiWeatherHistoricalParams,
  signal?: AbortSignal,
) => {
  return customInstance<HistoricalWeatherResponseDto>({
    url: `/api/Weather/historical`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiWeatherHistoricalQueryKey = (
  params: GetApiWeatherHistoricalParams,
) => {
  return [`/api/Weather/historical`, ...(params ? [params] : [])] as const;
};

export const getGetApiWeatherHistoricalQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiWeatherHistorical>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherHistoricalParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherHistorical>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiWeatherHistoricalQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiWeatherHistorical>>
  > = ({ signal }) => getApiWeatherHistorical(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiWeatherHistorical>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiWeatherHistoricalQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiWeatherHistorical>>
>;
export type GetApiWeatherHistoricalQueryError = ProblemDetails;

export function useGetApiWeatherHistorical<
  TData = Awaited<ReturnType<typeof getApiWeatherHistorical>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherHistoricalParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherHistorical>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiWeatherHistorical>>,
          TError,
          Awaited<ReturnType<typeof getApiWeatherHistorical>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiWeatherHistorical<
  TData = Awaited<ReturnType<typeof getApiWeatherHistorical>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherHistoricalParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherHistorical>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiWeatherHistorical>>,
          TError,
          Awaited<ReturnType<typeof getApiWeatherHistorical>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiWeatherHistorical<
  TData = Awaited<ReturnType<typeof getApiWeatherHistorical>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherHistoricalParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherHistorical>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiWeatherHistorical<
  TData = Awaited<ReturnType<typeof getApiWeatherHistorical>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherHistoricalParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherHistorical>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiWeatherHistoricalQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiWeatherCombined = (
  params: GetApiWeatherCombinedParams,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({
    url: `/api/Weather/combined`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiWeatherCombinedQueryKey = (
  params: GetApiWeatherCombinedParams,
) => {
  return [`/api/Weather/combined`, ...(params ? [params] : [])] as const;
};

export const getGetApiWeatherCombinedQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiWeatherCombined>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherCombinedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherCombined>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiWeatherCombinedQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiWeatherCombined>>
  > = ({ signal }) => getApiWeatherCombined(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiWeatherCombined>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiWeatherCombinedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiWeatherCombined>>
>;
export type GetApiWeatherCombinedQueryError = ProblemDetails;

export function useGetApiWeatherCombined<
  TData = Awaited<ReturnType<typeof getApiWeatherCombined>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherCombinedParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherCombined>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiWeatherCombined>>,
          TError,
          Awaited<ReturnType<typeof getApiWeatherCombined>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiWeatherCombined<
  TData = Awaited<ReturnType<typeof getApiWeatherCombined>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherCombinedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherCombined>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiWeatherCombined>>,
          TError,
          Awaited<ReturnType<typeof getApiWeatherCombined>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiWeatherCombined<
  TData = Awaited<ReturnType<typeof getApiWeatherCombined>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherCombinedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherCombined>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiWeatherCombined<
  TData = Awaited<ReturnType<typeof getApiWeatherCombined>>,
  TError = ProblemDetails,
>(
  params: GetApiWeatherCombinedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWeatherCombined>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiWeatherCombinedQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
